const {
  S3Client,
  CreateBucketCommand,
  PutBucketCorsCommand,
} = require("@aws-sdk/client-s3");
require("dotenv").config();

async function createS3Bucket() {
  const s3Client = new S3Client({
    region: process.env.AWS_REGION,
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    },
  });
  console.log("–ö—Ä–µ–¥—ã:", {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    region: process.env.AWS_REGION,
  });
  const bucketName = process.env.AWS_S3_BUCKET_NAME;

  try {
    console.log(`üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞: ${bucketName}`);

    const createBucketParams = {
      Bucket: bucketName,
    };

    // –î–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –æ—Ç–ª–∏—á–Ω—ã—Ö –æ—Ç us-east-1 –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å LocationConstraint
    if (process.env.AWS_REGION !== "us-east-1") {
      createBucketParams.CreateBucketConfiguration = {
        LocationConstraint: process.env.AWS_REGION,
      };
    }

    const createCommand = new CreateBucketCommand(createBucketParams);
    await s3Client.send(createCommand);

    console.log("‚úÖ –ë–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –≤–µ–±-–¥–æ—Å—Ç—É–ø–∞
    console.log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS...");
    const corsParams = {
      Bucket: bucketName,
      CORSConfiguration: {
        CORSRules: [
          {
            AllowedHeaders: ["*"],
            AllowedMethods: ["GET", "PUT", "POST", "DELETE", "HEAD"],
            AllowedOrigins: ["*"],
            ExposeHeaders: ["ETag"],
            MaxAgeSeconds: 3000,
          },
        ],
      },
    };

    const corsCommand = new PutBucketCorsCommand(corsParams);
    await s3Client.send(corsCommand);

    console.log("‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    if (error.Code === "BucketAlreadyExists") {
      console.log("‚ÑπÔ∏è –ë–∞–∫–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    } else if (error.Code === "BucketAlreadyOwnedByYou") {
      console.log("‚ÑπÔ∏è –ë–∞–∫–µ—Ç —É–∂–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º");
    } else {
      console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∫–µ—Ç–∞:");
      console.log("–ö–æ–¥:", error.Code || error.name);
      console.log("–°–æ–æ–±—â–µ–Ω–∏–µ:", error.message);
    }
  }
}

createS3Bucket().catch(console.error);
