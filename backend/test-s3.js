const {
  S3Client,
  PutObjectCommand,
  ListBucketsCommand,
} = require("@aws-sdk/client-s3");
require("dotenv").config();

async function testS3Connection() {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ S3...");

  // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log(
    "AWS_ACCESS_KEY_ID:",
    process.env.AWS_ACCESS_KEY_ID ? "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
  );
  console.log(
    "AWS_SECRET_ACCESS_KEY:",
    process.env.AWS_SECRET_ACCESS_KEY ? "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
  );
  console.log("AWS_REGION:", process.env.AWS_REGION || "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
  console.log(
    "AWS_S3_BUCKET_NAME:",
    process.env.AWS_S3_BUCKET_NAME || "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
  );

  if (
    !process.env.AWS_ACCESS_KEY_ID ||
    !process.env.AWS_SECRET_ACCESS_KEY ||
    !process.env.AWS_REGION ||
    !process.env.AWS_S3_BUCKET_NAME
  ) {
    console.log("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
    return;
  }

  // –°–æ–∑–¥–∞–µ–º S3 –∫–ª–∏–µ–Ω—Ç
  const s3Client = new S3Client({
    region: process.env.AWS_REGION,
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    },
  });

  try {
    console.log("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AWS S3...");

    // –¢–µ—Å—Ç 1: –°–ø–∏—Å–æ–∫ –±–∞–∫–µ—Ç–æ–≤
    const listBucketsCommand = new ListBucketsCommand({});
    const buckets = await s3Client.send(listBucketsCommand);
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AWS —É—Å–ø–µ—à–Ω–æ");
    console.log(
      "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∫–µ—Ç—ã:",
      buckets.Buckets?.map((b) => b.Name).join(", ") || "–ù–µ—Ç –±–∞–∫–µ—Ç–æ–≤"
    );

    // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞—à –±–∞–∫–µ—Ç
    const bucketExists = buckets.Buckets?.some(
      (b) => b.Name === process.env.AWS_S3_BUCKET_NAME
    );
    console.log(
      `üì¶ –ë–∞–∫–µ—Ç "${process.env.AWS_S3_BUCKET_NAME}":`,
      bucketExists ? "‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç" : "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω"
    );

    // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    if (bucketExists) {
      console.log("\nüì§ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...");
      const testKey = `test-${Date.now()}.txt`;
      const putCommand = new PutObjectCommand({
        Bucket: process.env.AWS_S3_BUCKET_NAME,
        Key: testKey,
        Body: Buffer.from("Test upload from backend"),
        ContentType: "text/plain",
      });

      await s3Client.send(putCommand);
      console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:", testKey);
    }
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ S3:");
    console.log("–ö–æ–¥ –æ—à–∏–±–∫–∏:", error.Code || error.name);
    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ:", error.message);
    console.log("–°—Ç–∞—Ç—É—Å:", error.$response?.statusCode);

    if (error.Code === "InvalidAccessKeyId") {
      console.log("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ AWS_ACCESS_KEY_ID");
    } else if (error.Code === "SignatureDoesNotMatch") {
      console.log("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ AWS_SECRET_ACCESS_KEY");
    } else if (error.Code === "NoSuchBucket") {
      console.log("üîß –ë–∞–∫–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞");
    }
  }
}

testS3Connection().catch(console.error);
